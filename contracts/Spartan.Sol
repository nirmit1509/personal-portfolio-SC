// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

import '@openzeppelin/contracts/token/ERC20/IERC20.sol';
import '@openzeppelin/contracts/utils/math/SafeMath.sol';

// ----------------------------------------------------------------------------
// ERC Token Standard #20 Interface
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
// ----------------------------------------------------------------------------
abstract contract ERC20Interface {
  function totalSupply() public virtual returns (uint256);

  function balanceOf(address tokenOwner)
    public
    virtual
    returns (uint256 balance);

  function allowance(address tokenOwner, address spender)
    public
    virtual
    returns (uint256 remaining);

  function transfer(address to, uint256 tokens)
    public
    virtual
    returns (bool success);

  function approve(address spender, uint256 tokens)
    public
    virtual
    returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 tokens
  ) public virtual returns (bool success);

  event Transfer(address indexed from, address indexed to, uint256 tokens);
  event Approval(
    address indexed tokenOwner,
    address indexed spender,
    uint256 tokens
  );
}

// ----------------------------------------------------------------------------
// Contract function to receive approval and execute function in one call
//
// Borrowed from MiniMeToken
// ----------------------------------------------------------------------------
abstract contract ApproveAndCallFallBack {
  function receiveApproval(
    address from,
    uint256 tokens,
    address token,
    bytes memory data
  ) public virtual;
}

// ----------------------------------------------------------------------------
// Owned contract
// ----------------------------------------------------------------------------
contract Owned {
  address public owner;
  address public newOwner;

  event OwnershipTransferred(address indexed _from, address indexed _to);

  constructor() {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address _newOwner) public onlyOwner {
    newOwner = _newOwner;
  }

  function acceptOwnership() public {
    require(msg.sender == newOwner);
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
    newOwner = address(0);
  }
}

// ----------------------------------------------------------------------------
// ERC20 Token, with the addition of symbol, name and decimals and assisted
// token transfers
// ----------------------------------------------------------------------------
contract Spartan is ERC20Interface, Owned {
  using SafeMath for uint256;
  string public symbol;
  string public name;
  uint8 public decimals;
  uint256 public _totalSupply;

  mapping(address => uint256) balances;
  mapping(address => mapping(address => uint256)) allowed;

  // ------------------------------------------------------------------------
  // Constructor
  // ------------------------------------------------------------------------
  constructor(address _preMinter) {
    symbol = 'WAR';
    name = 'Warrior token by spartan.casino';
    decimals = 18;
    _totalSupply = 100000000000000000000000000;
    // Change address before deploying
    balances[_preMinter] = _totalSupply;
    emit Transfer(address(0), _preMinter, _totalSupply);
  }

  // ------------------------------------------------------------------------
  // Total supply
  // ------------------------------------------------------------------------
  function totalSupply() public view override returns (uint256) {
    return _totalSupply - balances[address(0)];
  }

  // ------------------------------------------------------------------------
  // Get the token balance for account tokenOwner
  // ------------------------------------------------------------------------
  function balanceOf(address tokenOwner)
    public
    view
    override
    returns (uint256 balance)
  {
    return balances[tokenOwner];
  }

  // ------------------------------------------------------------------------
  // Transfer the balance from token owner's account to to account
  // - Owner's account must have sufficient balance to transfer
  // - 0 value transfers are allowed
  // ------------------------------------------------------------------------
  function transfer(address to, uint256 tokens)
    public
    override
    returns (bool success)
  {
    balances[msg.sender] = SafeMath.sub(balances[msg.sender], tokens);
    balances[to] = SafeMath.add(balances[to], tokens);
    emit Transfer(msg.sender, to, tokens);
    return true;
  }

  // ------------------------------------------------------------------------
  // Token owner can approve for spender to transferFrom(...) tokens
  // from the token owner's account
  //
  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
  // recommends that there are no checks for the approval double-spend attack
  // as this should be implemented in user interfaces
  // ------------------------------------------------------------------------
  function approve(address spender, uint256 tokens)
    public
    override
    returns (bool success)
  {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    return true;
  }

  // ------------------------------------------------------------------------
  // Transfer tokens from the from account to the to account
  //
  // The calling account must already have sufficient tokens approve(...)-d
  // for spending from the from account and
  // - From account must have sufficient balance to transfer
  // - Spender must have sufficient allowance to transfer
  // - 0 value transfers are allowed
  // ------------------------------------------------------------------------
  function transferFrom(
    address from,
    address to,
    uint256 tokens
  ) public override returns (bool success) {
    balances[from] = SafeMath.sub(balances[from], tokens);
    allowed[from][msg.sender] = SafeMath.sub(allowed[from][msg.sender], tokens);
    balances[to] = SafeMath.add(balances[to], tokens);
    emit Transfer(from, to, tokens);
    return true;
  }

  // ------------------------------------------------------------------------
  // Returns the amount of tokens approved by the owner that can be
  // transferred to the spender's account
  // ------------------------------------------------------------------------
  function allowance(address tokenOwner, address spender)
    public
    view
    override
    returns (uint256 remaining)
  {
    return allowed[tokenOwner][spender];
  }

  // ------------------------------------------------------------------------
  // Token owner can approve for spender to transferFrom(...) tokens
  // from the token owner's account. The spender contract function
  // receiveApproval(...) is then executed
  // ------------------------------------------------------------------------
  function approveAndCall(
    address spender,
    uint256 tokens,
    bytes memory data
  ) public returns (bool success) {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    ApproveAndCallFallBack(spender).receiveApproval(
      msg.sender,
      tokens,
      address(this),
      data
    );
    return true;
  }

  // ------------------------------------------------------------------------
  // Don't accept ETH
  // ------------------------------------------------------------------------
  receive() external payable {
    revert();
  }

  // ------------------------------------------------------------------------
  // Owner can transfer out any accidentally sent ERC20 tokens
  // ------------------------------------------------------------------------
  function transferAnyERC20Token(address tokenAddress, uint256 tokens)
    public
    onlyOwner
    returns (bool success)
  {
    return ERC20Interface(tokenAddress).transfer(owner, tokens);
  }
}
